h2. synopsis

This part of SByC provides a safe, reusable, extensible, mashallable, and non-intrusive (no monkey patching of Ruby core classes) implementation of block expressions. Block expressions are parsed using a generic DSL and converted to a parse tree, which may be analyzed, rewrited, compiled, and so on. The following example illustrates typical usage of CodeTree::parse.

<notextile>
^{xhtml/coderay/ruby}{<<{codetree/codetree_example.rb}}
</notextile>

h2. syntax

The following styles are recognized:

<notextile>
^{xhtml/coderay/ruby}{<<{codetree/codetree_syntax.rb}}
</notextile>

The parsing stage returns a code tree, which can be passed to a next stage (rewriting, evaluation, compilation or whatever). 

h2. semantics

*Branch nodes* in the code tree correspond to a function call with arguments (see AstNode for details):

<notextile>
^{xhtml/coderay/ruby}{(function arg0, arg1, arg2, ..., argn)}
</notextile>

where <code>arg0, arg1 ... argn</code> always are AstNode instances, expect for leaf nodes. Function name is accessible through the  _function_ attribute (aliased as _name_). Arguments are accessible through the _arg_ (aliased as _children_) attribute.

*Leaf nodes* encode literals through the special <code>'\_'</code> function. The later takes only one argument, which can be any ruby object, and is accessible through the _literal_ attribute. All and only leaf nodes have that function.

<notextile>
^{xhtml/coderay/ruby}{(_ literal)}
</notextile>

*Variable references* are denoted through a special function <code>'?'</code>. This operator expects one argument, i.e. the variable name, typically (but not necessarily) represented by a symbol literal.

<notextile>
^{xhtml/coderay/ruby}{(? variable_name)}
</notextile>

h2. examples

<notextile>
^{xhtml/coderay/ruby}{
CodeTree::parse{ 12 }.inspect       # (_ 12)
CodeTree::parse{ :x }.inspect       # (_ :x)
CodeTree::parse{ x  }.inspect       # (? (_ :x))
}
</notextile>

'_' and '?' operators only appear when invoking inspect:

<notextile>
^{xhtml/coderay/ruby}{
CodeTree::parse{ x + 12 }.inspect   # (+ (? (_ :x)), (_ 12))
CodeTree::parse{ x + 12 }.to_s      # (+ x, 12)
}
</notextile>

h2. limitations

*No imperative code*: SByC implicitly assumes that block's code can be interpreted functionally: no concept of variable, no sequence of code, no if/then/else, no loop. Said otherwise: your block code should always "compute a value", without having any other (state) side effect. The following will NOT work:

<notextile>
^{xhtml/coderay/ruby}{
CodeTree::parse{ if x then 0 else 1 end }  # 0
}
</notextile>


**Evaluation at parsing time**: SByC does not uses ruby2ruby or similar libraries to get an AST. It simply executes the block inside a specific DSL. Therefore, ruby expressions on literals will be evaluated at parsing time, according to operator precedence and ordering:
  
<notextile>
^{xhtml/coderay/ruby}{
CodeTree::parse{ x + 12 + 17     }      # => (+ (+ x, 12), 17)
CodeTree::parse{ x + (12 + 17)   }      # => (+ x, 29)
CodeTree::parse{ (x + 12) + 17   }      # => (+ (+ x, 12), 17)
}
</notextile>

**Ruby operator limitations**: for the same reason, only operators that rely on overridable methods are recognized. In particular, the following expressions will NOT work:

<notextile>
^{xhtml/coderay/ruby}{
CodeTree::parse{ x and y }              # => y
CodeTree::parse{ x && y  }              # => y
CodeTree::parse{ x or y  }              # => x
CodeTree::parse{ x || y  }              # => x
CodeTree::parse{ not(x)  }              # => false ... but works with Ruby >= 1.9
CodeTree::parse{ !x      }              # => false ... but works with Ruby >= 1.9
}
</notextile>

h2. credits

SByC - CodeTree (c) 2010 by Bernard Lambeau. SByC is distributed under the MIT licence. Please see the LICENCE.md document for details.