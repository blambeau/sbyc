h2. synopsis

Expressions parsed using CodeTree::parse are **functional expressions**. However, there is two ways to make their evaluation in Ruby: the object-way and the functional-way. Both are proposed as methods installed on AstNode.

h2. object evaluation 

In object evaluation (_object_eval_ method, aliased as _eval_ on AstNode), the expression

<notextile>
^{xhtml/coderay/ruby}{(function arg0, arg1, ..., argn)}
</notextile>
    
is recursively executed as

<notextile>
^{xhtml/coderay/ruby}{arg0.function(arg1, ..., argn)}
</notextile>

For instance,

<notextile>
^{xhtml/coderay/ruby}{
expr = CodeTree::parse{ (x + y).to_s }   
# => (to_s (+ x, y))

expr.eval(:x => 3, :y => 25)             
# => "28", executed as (x.+(y)).to_s()
}
</notextile>

h2. functional evaluation

In functional evaluation (_functional_eval_ method, aliased as _apply_ on AstNode), the expression

<notextile>
^{xhtml/coderay/ruby}{
(function arg0, arg1, ..., argn)
}
</notextile>
    
is recursively executed in the context of a _receiver_ object as 

<notextile>
^{xhtml/coderay/ruby}{
receiver.function(arg0, arg1, ..., argn)
}
</notextile>

For instance,

<notextile>
^{xhtml/coderay/ruby}{
expr = CodeTree::parse{ (display (concat x, y)) }    
# => (display (concat x, y))

expr.apply(receiver, :x => 3, :y => 25)              
# => "325", executed as receiver.display(receiver.concat(x, y))
}
</notextile>
