h2. synopsis

SByC is an investigation about Specialization by Constraint as an alternative to common type systems that we found in (object-oriented) programming languages. The library is written as a collection of Ruby tools described below. Those tools are in fact sub-gems of SByC that can often be used in isolation.

<notextile>
^{xhtml/coderay/html}{gem install sbyc}
</notextile>

h2. code tree

This part of SByC provides a safe, reusable, extensible, mashallable, and non-intrusive (no monkey patching of Ruby core classes) implementation of block expressions. Block expressions are parsed using a generic DSL and converted to a parse tree, which may be analyzed, rewrited, compiled, and so on. The example below illustrates typical usage of CodeTree.

<notextile>
^{xhtml/coderay/ruby}{<<{codetree/codetree_example.rb}}
</notextile>

@{codetree.html}{Read more about CodeTree}

h2. type system

This part of SByC implements a TypeSystem abstraction. A type is simply collection of values. A type system is to generate and parse literals and to coerce from String values.

<notextile>
^{xhtml/coderay/ruby}{<<{type_system/type_system_example.rb}}
</notextile>

@{type_system.html}{Read more about TypeSystem}

h2. credits

SByC (c) 2010 by Bernard Lambeau. SByC is distributed under the MIT licence. Please see the LICENCE.md document for details.