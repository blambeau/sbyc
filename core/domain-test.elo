# Create an assertion operator
(defmacro :eq!     (ruby-send :__equal__!     self $0 $1))
(defmacro :neq!    (ruby-send :__not_equal__! self $0 $1))
(defmacro :'is-a!' (eq! true (is-a? $0 $1)))

# (domain-of Alpha)
(eq! Domain  (domain-of Domain))
(eq! Boolean (domain-of true))
(eq! Integer (domain-of 0))
(eq! Float   (domain-of 0.0))
(eq! Array   (domain-of [0, "hello"]))

# (domain-name Domain)
(eq! :Domain  (domain-name Domain))
(eq! :Boolean (domain-name Boolean))
(eq! :Array   (domain-name Array))
(eq! :Array   (domain-name Array<Alpha>))
(eq! :"Array<String>" (domain-name Array<String>))
(eq! :"Array<Array<String>>" (domain-name Array<Array<String>>))

# (domain-exemplars Domain)
(is-a! Array<Domain>       (domain-exemplars Domain))
(is-a! Array<Expression>   (domain-exemplars Expression))
(is-a! Array<Macro>        (domain-exemplars Macro))
(is-a! Array<Boolean>      (domain-exemplars Boolean))
(is-a! Array<Symbol>       (domain-exemplars Symbol))
(is-a! Array<Numeric>      (domain-exemplars Numeric))
(is-a! Array<Integer>      (domain-exemplars Integer))
(is-a! Array<Float>        (domain-exemplars Float))
(is-a! Array<Regexp>       (domain-exemplars Regexp))
(is-a! Array<Date>         (domain-exemplars Date))
(is-a! Array<Heading>      (domain-exemplars Heading))
(is-a! Array<Operator>     (domain-exemplars Operator))
(is-a! Array<Time>         (domain-exemplars Time))
(is-a! Array<String>       (domain-exemplars String))
(is-a! Array<Array<String>> (domain-exemplars Array<String>))
(is-a! Array<Alpha>        (domain-exemplars Array))
(is-a! Array<Alpha>        (domain-exemplars Alpha))

# (is-a? Domain Alpha)
(eq! true   (is-a? Alpha "hello"))
(eq! true   (is-a? String "hello"))
(eq! false  (is-a? Boolean "hello"))
(eq! true,  (is-a? Array<Alpha> [ 12 ]))
(eq! true,  (is-a? Array<Alpha> [ [], 12 ]))
(eq! true,  (is-a? Array<Integer> [ 12 ]))
(eq! false, (is-a? Array<String>  [ 12 ]))
(eq! true,  (is-a? Array<Array<String>>  [ [ "hello" ] ]))
(eq! true,  (is-a? Array<Array<String>>  [ [ "hello" ] [ "world"] ]))
(eq! false, (is-a? Array<Array<String>>  [ [ "hello" ] 12 ]))
(eq! false, (is-a? Array<Array<Alpha>>  [ [ "hello" ] 12 ]))
(eq! true,  (is-a? Array<Array<Alpha>>  [ [ "hello" ] [ 12 ] ]))

# (is-sub-domain-of? Domain Domain)
(eq! true  (is-sub-domain-of? Alpha Alpha))
(eq! true  (is-sub-domain-of? Integer Alpha))
(eq! true  (is-sub-domain-of? Integer Integer))
(eq! false (is-sub-domain-of? Alpha Integer))

# (is-proper-sub-domain-of? Domain Domain)
(eq! false  (is-proper-sub-domain-of? Alpha Alpha))
(eq! true   (is-proper-sub-domain-of? Integer Alpha))
(eq! false  (is-proper-sub-domain-of? Integer Integer))
(eq! false  (is-proper-sub-domain-of? Alpha Integer))

# (is-super-domain-of? Domain Domain)
(eq! true  (is-super-domain-of? Alpha Alpha))
(eq! false (is-super-domain-of? Integer Alpha))
(eq! true  (is-super-domain-of? Integer Integer))
(eq! true  (is-super-domain-of? Alpha Integer))

# (is-proper-super-domain-of? Domain Domain)
(eq! false (is-proper-super-domain-of? Alpha Alpha))
(eq! false (is-proper-super-domain-of? Integer Alpha))
(eq! false (is-proper-super-domain-of? Integer Integer))
(eq! true  (is-proper-super-domain-of? Alpha Integer))
