module SByC
  module R
    class DomainGenerator
      
      # Creates a generator instance
      def initialize
        @domains_hash = {}
      end
      
      # Factors a class with class methods and instance methods
      def factor_class(class_methods = [], instance_methods = [])
        clazz = Class.new
        class_methods.flatten.each{|mod| 
          clazz.extend(mod)
        }
        instance_methods.flatten.each{|mod|
          clazz.instance_eval{ include(mod) }
        }
        clazz
      end
      
      # Factors a domain class
      def factor_domain_class(class_methods = [], instance_methods = [])
        clazz = factor_class([R::AbstractDomain] + class_methods, instance_methods)
        clazz.domain_generator = self
        clazz.const_set(:Operators, R::Operator::Set.factor)
        clazz
      end
      
      #
      # Returns the name of a domain generated by this generator.
      #
      # @param [Class] a domain previously generated by this generator.
      # @return [String] domain's name
      #
      def domain_name_of(domain)
        raise NotImplementedError
      end
        
      # Returns known domains
      def domains
        @domains_hash.values
      end
      
      # Tracks creation of domains
      def domain_created(name, domain)
        @domains_hash[name] = domain
      end
        
    end # class DomainGenerator
  end # module R
end # module SByc
require 'sbyc/r/domain_generator/builtin'
require 'sbyc/r/domain_generator/array'
require 'sbyc/r/domain_generator/tools'